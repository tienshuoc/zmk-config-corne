/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_parentheses {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            layers = <0>;
        };

        right_parentheses {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <26 27>;
            layers = <0>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <27 28>;
            layers = <0>;
        };

        cut {
            bindings = <&kp K_CUT>;
            key-positions = <28 26>;
            layers = <0>;
        };

        print_screen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <29 25>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
            layers = <1>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
            layers = <1>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
            layers = <0>;
        };

        forward_slash {
            bindings = <&kp SLASH>;
            key-positions = <20 32>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <19 20>;
            layers = <1>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <20 21>;
            layers = <1>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            layers = <0>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
            layers = <1>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            layers = <1>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 33>;
            layers = <0>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <33 21>;
            layers = <1>;
        };

        single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <6 18>;
            layers = <1>;
        };

        double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <6 18>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <19 31>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <9 21>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 21>;
            layers = <1>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <4 16>;
            layers = <0>;
        };

        tick {
            bindings = <&kp GRAVE>;
            key-positions = <4 16>;
            layers = <1>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <5 17>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
            layers = <1>;
        };

        equal {
            bindings = <&kp SLASH>;
            key-positions = <7 19>;
            layers = <0>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            layers = <0 1 2 3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
            layers = <0>;
        };

        trigger_func_layer {
            bindings = <&mo 3>;
            key-positions = <40 8>;
            layers = <0>;
        };

        media_layer_trigger {
            bindings = <&mo 4>;
            key-positions = <3 37>;
            layers = <0>;
        };
    };

    behaviors {
        qmark_to_exclmark: qmark_to_exclmark {
            compatible = "zmk,behavior-mod-morph";
            label = "QMARK_TO_EXCLMARK";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_to_semicolon: comma_to_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_TO_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_to_colon: period_to_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_TO_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_num_trigger: smart_num_trigger {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM_TRIGGER";
            bindings = <&mo>, <&num_dance>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            bindings = <&none>, <&tog 2>;
        };

        capslock_dance: capslock_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPSLOCK_DANCE";
            #binding-cells = <0>;
            bindings = <&none>, <&kp CAPSLOCK>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_SHIFT";
            bindings = <&kp>, <&capslock_dance>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &kp F         &kp P  &kp B                        &kp J      &kp L                   &kp U                &kp Y             &kp SEMICOLON       &kp BSPC
&kp LCTRL     &kp A  &kp R  &kp S         &kp T  &kp G                        &kp M      &kp N                   &kp E                &kp I             &kp O               &kp SQT
&kp LEFT_GUI  &kp Z  &kp X  &kp C         &kp D  &kp V                        &kp K      &kp H                   &comma_to_semicolon  &period_to_colon  &qmark_to_exclmark  &kp LEFT_META
                            &kp LEFT_ALT  &mo 1  &smart_shift LEFT_SHIFT 0    &kp SPACE  &smart_num_trigger 2 0  &kp RIGHT_ALT
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &trans    &trans              &kp BACKSPACE  &kp DELETE  &trans      &kp PAGE_UP
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN            &kp UP         &kp RIGHT   &kp RETURN  &kp PAGE_DOWN
&trans  &trans        &trans          &trans        &trans        &trans          &trans    &kp K_CONTEXT_MENU  &trans         &trans      &trans      &kp HOME
                                      &trans        &trans        &trans          &trans    &trans              &trans
            >;
        };

        smart_num_layer {
            bindings = <
&kp DOLLAR   &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTERISK     &trans  &trans  &trans  &trans  &trans  &trans
&kp PERCENT  &kp N0     &kp N4  &kp N5  &kp N6  &kp PERIOD       &trans  &trans  &trans  &trans  &trans  &trans
&kp HASH     &kp MINUS  &kp N1  &kp N2  &kp N3  &kp KP_DIVIDE    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans           &trans  &trans  &trans
            >;
        };

        func_layer {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &trans  &trans  &trans  &trans  &trans  &trans
&kp F7          &kp F8        &kp F9        &kp F10       &kp F11       &kp F12         &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        media_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRI_UP              &kp C_VOLUME_UP    &kp C_PP  &kp C_PREVIOUS  &kp C_NEXT
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRI_DN              &kp C_VOLUME_DOWN  &trans    &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRIGHTNESS_MINIMUM  &kp C_MUTE         &trans    &trans          &trans
                        &trans  &trans  &trans    &trans  &trans                    &trans
            >;
        };
    };
};
