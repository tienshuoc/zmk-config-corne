/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <26 27>;
            layers = <0>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <27 28>;
            layers = <0>;
        };

        cut {
            bindings = <&kp K_CUT>;
            key-positions = <28 26>;
            layers = <0>;
        };

        print_screen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <29 25>;
            layers = <0>;
        };

        forward_slash {
            bindings = <&kp SLASH>;
            key-positions = <20 19>;
            layers = <0>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 20>;
            layers = <0>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <32 20>;
            layers = <0>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
            layers = <0>;
        };

        tilde_tick {
            bindings = <&tilde_tick>;
            key-positions = <4 16>;
            layers = <0>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            layers = <0 1 2 3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
            layers = <0>;
        };

        trigger_func_layer {
            bindings = <&mo 3>;
            key-positions = <40 8>;
            layers = <0>;
        };

        media_layer_trigger {
            bindings = <&mo 4>;
            key-positions = <3 37>;
            layers = <0>;
        };

        left_parenthesis_less_than {
            bindings = <&left_parenthesis_less_than>;
            key-positions = <19 31>;
            layers = <0>;
        };

        right_parenthesis_greater_than {
            bindings = <&right_parenthesis_greater_than>;
            key-positions = <21 33>;
            layers = <0>;
        };

        left_bracket_left_brace {
            bindings = <&left_bracket_left_brace>;
            key-positions = <7 19>;
            layers = <0>;
        };

        right_bracket_right_brace {
            bindings = <&right_bracket_right_brace>;
            key-positions = <9 21>;
            layers = <0>;
        };

        ampersand_caret {
            bindings = <&ampersand_caret>;
            key-positions = <8 20>;
            layers = <0>;
        };

        minus_underscore {
            bindings = <&kp MINUS>;
            key-positions = <31 32>;
        };

        toggle_qwerty {
            bindings = <&tog 6>;
            key-positions = <36 41>;
        };
    };

    behaviors {
        qmark_to_exclmark: qmark_to_exclmark {
            compatible = "zmk,behavior-mod-morph";
            label = "QMARK_TO_EXCLMARK";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_to_semicolon: comma_to_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_TO_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_to_colon: period_to_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_TO_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_num_trigger: smart_num_trigger {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM_TRIGGER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            bindings = <&none>, <&tog 2>;

            tapping-term-ms = <200>;
        };

        capslock_dance: capslock_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPSLOCK_DANCE";
            #binding-cells = <0>;
            bindings = <&none>, <&caps_word>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_SHIFT";
            bindings = <&kp>, <&capslock_dance>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 6 7 8 9 10 18 6 7 9 10 11 18 19 20 21 22 23 32 30 31 32 33 34 35>;
            flavor = "balanced";
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        num_word: num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            continue-list = <BACKSPACE DELETE DOT COMMA>;
        };

        left_parenthesis_less_than: left_parenthesis_less_than {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PARENTHESIS_LESS_THAN";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_parenthesis_greater_than: right_parenthesis_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PARENTHESIS_GREATER_THAN";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        left_bracket_left_brace: left_bracket_left_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACKET_LEFT_BRACE";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_bracket_right_brace: right_bracket_right_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACKET_RIGHT_BRACE";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tilde_tick: tilde_tick {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_TICK";
            bindings = <&kp TILDE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ampersand_caret: ampersand_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_CARET";
            bindings = <&kp AMPERSAND>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE    &kp Q                 &kp W                 &kp F              &kp P                   &kp B                        &kp J      &kp L                     &kp U                &kp Y                   &kp SEMICOLON           &kp BSPC
&kp LCTRL     &hrm_left LEFT_GUI A  &hrm_left LEFT_ALT R  &hrm_left LCTRL S  &hrm_left LEFT_SHIFT T  &kp G                        &kp M      &hrm_right RIGHT_SHIFT N  &hrm_right RCTRL E   &hrm_right RIGHT_ALT I  &hrm_right RIGHT_GUI O  &kp SQT
&kp LEFT_GUI  &kp Z                 &kp X                 &kp C              &kp D                   &kp V                        &kp K      &kp H                     &comma_to_semicolon  &period_to_colon        &qmark_to_exclmark      &kp LEFT_META
                                                          &mo 5              &mo 1                   &smart_shift LEFT_SHIFT 0    &kp SPACE  &smart_num_trigger 2 2    &kp RIGHT_ALT
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &kp K_MENU          &kp BACKSPACE  &kp DELETE  &trans      &kp PAGE_UP
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN            &kp UP         &kp RIGHT   &kp RETURN  &kp PAGE_DOWN
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp K_CONTEXT_MENU  &trans         &kp END     &trans      &trans
                        &trans  &trans  &trans    &trans    &trans              &trans
            >;
        };

        num_layer {
            bindings = <
&kp DOLLAR   &kp PLUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ASTERISK     &trans    &trans    &trans        &trans     &trans  &trans
&kp PERCENT  &kp N0     &kp N4        &kp N5        &kp N6        &kp PERIOD       &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&kp HASH     &kp MINUS  &kp N7        &kp N8        &kp N9        &kp KP_DIVIDE    &trans    &trans    &trans        &trans     &trans  &trans
                                      &trans        &kp EQUAL     &trans           &trans    &trans    &trans
            >;
        };

        func_layer {
            bindings = <
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        media_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRI_UP              &kp C_VOLUME_UP    &kp C_PP  &kp C_PREVIOUS  &kp C_NEXT
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRI_DN              &kp C_VOLUME_DOWN  &trans    &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRIGHTNESS_MINIMUM  &kp C_MUTE         &trans    &trans          &trans
                        &trans  &trans  &trans    &trans  &trans                    &trans
            >;
        };

        bluetooth_layer {
            bindings = <
&bt BT_CLR_ALL  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&trans  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
